# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ADDtype.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import sys
import time
import json

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDate, QCalendar,Qt
from PyQt5.QtGui import QBrush, QColor
from PyQt5.QtWidgets import QApplication, QMainWindow, QTableWidgetItem, QHeaderView, QAbstractItemView, QFileDialog, \
    QWidget, QMessageBox,QPushButton,QLineEdit

from PyQt5 import QtCore, QtGui, QtWidgets
import QSS

class TYpe(QWidget):
    def __init__(self,obj,exobj):
        super(TYpe, self).__init__()

        self._path = os.getcwd()
        self._main=obj  # 对象
        self._excel = exobj  #Exobj
        # 保存选择的结果,1,2,3
        self._choose={"name":"","r":1}
        # 创建的按钮字典
        self._createBtn = dict()
        # 将创建好的按钮存入本地
        self._localcreate = dict()
        self._btnfile = "btn.json"
        # Line_标志
        self._LINE = False

        try:
            with open(self._path + "/" + self._btnfile, "r") as f:
                controls = json.load(f)  # type:dict
            # 创建
            for k in controls.keys():
                self._pushFrame(controls[k]["type"], k)
        except Exception as e:
            # print(e)
            with open(self._path+"/"+self._btnfile,"w") as f:
                json.dump(dict(),f)
        self.setupUi()

    def setupUi(self):
        self.setObjectName("widget")
        self.resize(552, 331)
        self.setMinimumSize(QtCore.QSize(552, 331))
        self.setMaximumSize(QtCore.QSize(552, 331))
        self.groupBox_2 = QtWidgets.QGroupBox(self)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 40, 151, 171))
        self.groupBox_2.setMinimumSize(QtCore.QSize(151, 171))
        self.groupBox_2.setMaximumSize(QtCore.QSize(151, 171))
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout.setObjectName("verticalLayout")
        self.radioButton_num = QtWidgets.QRadioButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton_num.setFont(font)
        self.radioButton_num.setObjectName("radioButton_num")
        self.verticalLayout.addWidget(self.radioButton_num)
        self.radioButton_bool = QtWidgets.QRadioButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton_bool.setFont(font)
        self.radioButton_bool.setObjectName("radioButton_bool")
        self.verticalLayout.addWidget(self.radioButton_bool)
        self.radioButton_dzy = QtWidgets.QRadioButton(self.groupBox_2)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.radioButton_dzy.setFont(font)
        self.radioButton_dzy.setObjectName("radioButton_dzy")
        self.verticalLayout.addWidget(self.radioButton_dzy)
        self.pushButton = QtWidgets.QPushButton(self)
        self.pushButton.setGeometry(QtCore.QRect(200, 180, 113, 71))
        self.pushButton.setMinimumSize(QtCore.QSize(113, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_title = QtWidgets.QLabel(self)
        self.label_title.setGeometry(QtCore.QRect(220, 10, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.labelName_del = QtWidgets.QLabel(self)
        self.labelName_del.setGeometry(QtCore.QRect(180, 110, 81, 41))
        self.labelName_del.setMinimumSize(QtCore.QSize(71, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.labelName_del.setFont(font)
        self.labelName_del.setObjectName("labelName_del")
        self.lineEditName_del = QtWidgets.QLineEdit(self)
        self.lineEditName_del.setGeometry(QtCore.QRect(270, 110, 251, 41))
        self.lineEditName_del.setMinimumSize(QtCore.QSize(251, 41))
        self.lineEditName_del.setObjectName("lineEditName_del")
        self.pushButton_2 = QtWidgets.QPushButton(self)
        self.pushButton_2.setGeometry(QtCore.QRect(360, 180, 113, 71))
        self.pushButton_2.setMinimumSize(QtCore.QSize(113, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.checkBox = QtWidgets.QCheckBox(self)
        self.checkBox.setGeometry(QtCore.QRect(270, 160, 86, 20))
        self.checkBox.setObjectName("checkBox")
        self.lineEditName = QtWidgets.QLineEdit(self)
        self.lineEditName.setGeometry(QtCore.QRect(270, 60, 251, 41))
        self.lineEditName.setMinimumSize(QtCore.QSize(251, 41))
        self.lineEditName.setObjectName("lineEditName")
        self.labelName = QtWidgets.QLabel(self)
        self.labelName.setGeometry(QtCore.QRect(190, 60, 71, 41))
        self.labelName.setMinimumSize(QtCore.QSize(71, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.labelName.setFont(font)
        self.labelName.setObjectName("labelName")

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

        # 确定事件
        self.pushButton.clicked.connect(lambda :self.crate())
        # 复选框
        self.checkBox.stateChanged.connect(lambda :self._chek())
        # 删除事件
        self.pushButton_2.clicked.connect(lambda :self.delbtn())

    def closeEvent(self, a0: QtGui.QCloseEvent) -> None:
        # 写入文件
        with open(self._path + "/" + self._btnfile, "w") as f:
            json.dump(self._localcreate, f)


    # 复选框
    def _chek(self):
        if self.checkBox.isChecked():
            self.pushButton.setEnabled(False)
            self.lineEditName.setEnabled(False)
            self.lineEditName_del.setEnabled(True)
            self.pushButton_2.setEnabled(True)
        else:
            self.pushButton.setEnabled(True)
            self.lineEditName.setEnabled(True)
            self.lineEditName_del.setEnabled(False)
            self.pushButton_2.setEnabled(False)

    # 返回选择的结果
    def getChoose(self):
        return self._choose

    # 主窗口对象
    # def mainobj(self,obj):
    #     self._main = obj   # type:MainUI

    # 删除按钮
    def delbtn(self):
        temp = ["增","减","是","否","Z"]
        # 获取需要删除的按钮
        text = self.lineEditName_del.text()
        name = text
        # name,zhui = text[:-1],text[-1]
        if text and text[-1] not in temp and text in self._excel.getTwoList():
            # 删除
            self._excel.delTwoList(name)
            self._excel.extensionExcel()
            self._main.refresh() # 刷新
            if text+"增" in self._createBtn or text+"是" in self._createBtn or text+"Z" in self._createBtn:
                for k in temp:
                    try:
                        type = self._createBtn[text+k]["type"]
                        break
                    except Exception:
                        type =999
                        pass

                # type = self._createBtn[text]["type"]
                if type == 1:
                    self._createBtn[name+"增"]["obj"].close()
                    self._createBtn[name+"减"]["obj"].close()
                    del self._createBtn[name+"增"]
                    del self._createBtn[name+"减"]
                elif type ==2:
                    self._createBtn[name + "是"]["obj"].close()
                    self._createBtn[name + "否"]["obj"].close()
                    del self._createBtn[name + "是"]
                    del self._createBtn[name + "否"]
                elif type ==3:
                    self._createBtn[name]["obj"].close()
                    self._createBtn[name + "Z"]["obj"].close()
                    del self._createBtn[name]
                    del self._createBtn[name + "Z"]

                if name in self._localcreate:
                    del self._localcreate[name]
                # 写入文件
                with open(self._path + "/" + self._btnfile, "w") as f:
                    json.dump(self._localcreate, f)
                QMessageBox.information(self, "提示", "删除")
                self.lineEditName_del.setText("")
            else:
                QMessageBox.information(self, "提示", "不存在")
        else:
            QMessageBox.information(self, "提示", "不需要后缀/请输入")

    # 确定事件
    def crate(self):
        # 获取名称
        text = self.lineEditName.text()
        # if text in self._localcreate:
        #     print(text, "存在")
        if text and text not in self._localcreate:
            # 同步Excel
            self._excel.addTwoList(text)
            self._excel.extensionExcel()
            self._main.refresh() # 刷新

            self._choose["name"] = text
            self._main.choose["name"] = text

            if self.radioButton_num.isChecked():
                self._createQPush(1,text)
            elif self.radioButton_bool.isChecked():
                self._createQPush(2,text)
            elif self.radioButton_dzy.isChecked():
                self._createQPush(3,text)
            else:
                QMessageBox.information(self, "提示", "请选择")

            QMessageBox.information(self, "提示", "创建成功")
            self.lineEditName.setText("")
            self.close()
        else:
            QMessageBox.information(self, "提示", "请先输入标签名称/已存在")




    # 创建按钮
    def _createQPush(self,num,text):
        if self.radioButton_num.isChecked():
            self._pushFrame(num,text)
        elif self.radioButton_bool.isChecked():
            self._pushFrame(num,text)
        elif self.radioButton_dzy.isChecked():
            self._pushFrame(num,text)

    # 创建按钮
    def _pushFrame(self,type,text):
        if type == 1:
            self._puthButtonNum(type,text)
        elif type == 2:
            self._puthButtonBool(type,text)
        elif type ==3:
            self._puthButtonZDY(type,text)

    # 创建按钮
    def _puthButton(self,num,text):
        temp = ["增","是"]
        temp2 = ["减","否"]
        # 添加到字典
        addPush = QPushButton(self._main.scrollAreaWidgetContents)
        addPush.setObjectName("serialNum_addPush")
        addPush.setMinimumSize(QtCore.QSize(81, 50))
        addPush.setMaximumSize(QtCore.QSize(81, 50))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        addPush.setFont(font)
        addPush.setText(text)
        self._main.gridLayout_11.addWidget(addPush)
        # 样式
        if text[-1] in temp:
            addPush.setStyleSheet(QSS.zdy_push_Color())
        elif text[-1] in temp2:
            addPush.setStyleSheet(QSS.zdy_push_Color2())
        else:
            addPush.setStyleSheet(QSS.zdy_push_Color())
        self._Btnevent(addPush,num,text)

        # 添加到字典
        if text not in self._createBtn:
            self._createBtn[text]={"obj":addPush,"type":num}
        if text[:-1] not in self._localcreate and num != 3:
            self._localcreate[text[:-1]] = {"type": num}
        elif num == 3 and text not in self._localcreate:
            self._localcreate[text] = {"type": num}

    # 创建的新按钮事件
    def _Btnevent(self,obj:QPushButton,num,text):
        name = text[:-1]
        suffix = text[-1]
        if num == 1:
            obj.clicked.connect(lambda :test())
            def test():
                self._excel.setTwoSignalDict(text[:-1])
                if suffix == "增":
                    self._excel.AExe()
                    # 当前时间
                    timeing = self._main._mytime()
                    self._main._crateHistory(name, timeing)
                elif suffix == "减":
                    self._excel.setTwoSignalDict(text[:-1])
                    self._excel.AExe(AR=False)
                    # 当前时间
                    timeing = self._main._mytime()
                    self._main._crateHistory(name, timeing)
                # 当前预览
                self._main.ExcelPreviewING()
                # 统计数据显示
                self._main.dataShow()
        elif num == 2:
            obj.clicked.connect(lambda: test())
            def test():
                self._excel.setTwoSignalDict(text[:-1])
                if suffix == "是":
                    self._excel.AExe(data="是")
                    # 当前时间
                    timeing = self._main._mytime()
                    self._main._crateHistory(name, timeing)
                elif suffix == "否":
                    self._excel.AExe(data="否")
                    # 当前时间
                    timeing = self._main._mytime()
                    self._main._crateHistory(name, timeing)
                # 当前预览
                self._main.ExcelPreviewING()
                # 统计数据显示
                self._main.dataShow()
        elif num == 3:
            # if text in self._createBtn: # 防止line也创建事件
            obj.clicked.connect(lambda: test())
            def test():
                v = self._createBtn[text+"Z"]["obj"].text()
                if v:
                    self._excel.setTwoSignalDict(text)
                    self._excel.AExe(data=v)
                    # 当前时间
                    timeing = self._main._mytime()
                    self._main._crateHistory(text, timeing)
                    # 当前预览
                    self._main.ExcelPreviewING()
                    # 统计数据显示
                    self._main.dataShow()
                else:
                    QMessageBox.information(self, "提示", "请先输入数据")

    # 创建输入框
    def _lineEeit(self,num):
        line = QLineEdit(self._main.scrollAreaWidgetContents)
        line.setMinimumSize(QtCore.QSize(100, 40))
        line.setMaximumSize(QtCore.QSize(100, 40))
        self._main.gridLayout_11.addWidget(line)
        # 样式
        line.setStyleSheet(QSS.lineColor())
        # 添加
        endText = list(self._createBtn)[-1]
        self._createBtn[endText + "Z"] = {"obj": line, "type": num}

    # 数值型按钮
    def _puthButtonNum(self,num,text):
        self._puthButton(num,text+"增")
        self._puthButton(num,text+"减")
    # 布尔型按钮
    def _puthButtonBool(self,num, text):
        self._puthButton(num,text + "是")
        self._puthButton(num,text + "否")
    # 自定义型
    def _puthButtonZDY(self,num,text):
        self._puthButton(num,text)
        self._LINE = True
        self._lineEeit(num)



    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("widget", "增删除标签"))
        self.groupBox_2.setTitle(_translate("widget", "类型"))
        self.radioButton_num.setText(_translate("widget", "数值型"))
        self.radioButton_bool.setText(_translate("widget", "是或否型"))
        self.radioButton_dzy.setText(_translate("widget", "自定义型"))
        self.pushButton.setText(_translate("widget", "增加"))
        self.label_title.setText(_translate("widget", "增加/删除标签"))
        self.labelName_del.setText(_translate("widget", "删除标签名:"))
        self.pushButton_2.setText(_translate("widget", "删除"))
        self.checkBox.setText(_translate("widget", "同意删除"))
        self.labelName.setText(_translate("widget", "标签名:"))

        self.radioButton_num.setChecked(True)
        # 设置为禁用
        self.lineEditName_del.setEnabled(False)
        self.pushButton_2.setEnabled(False)


if __name__ == '__main__':
    app = QApplication(sys.argv)

    ui = TYpe()
    ui.show()

    sys.exit(app.exec_())

